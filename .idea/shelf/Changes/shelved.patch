Index: src/main/java/com/example/pizzaprojekt/Service/PizzaService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Service/PizzaService.java b/src/main/java/com/example/pizzaprojekt/Service/PizzaService.java
new file mode 100644
--- /dev/null	(date 1700892057856)
+++ b/src/main/java/com/example/pizzaprojekt/Service/PizzaService.java	(date 1700892057856)
@@ -0,0 +1,49 @@
+package com.example.pizzaprojekt.Service;
+
+import com.example.pizzaprojekt.Controller.PizzaController;
+import com.example.pizzaprojekt.Entity.Pizza;
+import com.example.pizzaprojekt.Repository.PizzaRepository;
+import lombok.AllArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@AllArgsConstructor
+
+
+@Service
+ public class PizzaService {
+    private final PizzaRepository pizzaRepository;
+
+    public List<Pizza> getAllPizza(){
+        return pizzaRepository.findAll();
+    }
+
+    public Pizza getPizzaById(Long id){
+        return pizzaRepository.findById(id).orElse(null);
+    }
+    public Pizza createPizza(Pizza pizza) {
+        return pizzaRepository.save(pizza);
+    }
+
+        public Pizza updatePizza(Long pizzaId, Pizza updatePizza) {
+        Pizza pizza1 = pizzaRepository.findById(pizzaId).orElse(null);
+        if (pizza1 != null){
+            pizza1.setNamePizza(updatePizza.getNamePizza());
+            pizza1.setQuantity(updatePizza.getQuantity());
+            pizza1.setIngredients(updatePizza.getIngredients());
+            pizza1.setSize(updatePizza.getSize());
+            pizza1.setPrice(updatePizza.getPrice());
+            return pizzaRepository.save(pizza1);
+        }
+        return null;
+    }
+
+    public void deletePizza(Long pizzaId){
+        pizzaRepository.deleteById(pizzaId);
+
+
+    }}
+
+
+
Index: src/main/resources/Временно отключенные
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/Временно отключенные b/src/main/resources/Временно отключенные
new file mode 100644
--- /dev/null	(date 1700893761289)
+++ b/src/main/resources/Временно отключенные	(date 1700893761289)
@@ -0,0 +1,4 @@
+ <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-security</artifactId>
+        </dependency>
\ No newline at end of file
Index: src/main/java/com/example/pizzaprojekt/Repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Repository/UserRepository.java b/src/main/java/com/example/pizzaprojekt/Repository/UserRepository.java
new file mode 100644
--- /dev/null	(date 1700891802049)
+++ b/src/main/java/com/example/pizzaprojekt/Repository/UserRepository.java	(date 1700891802049)
@@ -0,0 +1,9 @@
+package com.example.pizzaprojekt.Repository;
+
+
+import com.example.pizzaprojekt.Entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface UserRepository extends JpaRepository<User, Long> {
+
+}
Index: src/main/java/com/example/pizzaprojekt/PizzaProjektApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/PizzaProjektApplication.java b/src/main/java/com/example/pizzaprojekt/PizzaProjektApplication.java
new file mode 100644
--- /dev/null	(date 1700890910491)
+++ b/src/main/java/com/example/pizzaprojekt/PizzaProjektApplication.java	(date 1700890910491)
@@ -0,0 +1,13 @@
+package com.example.pizzaprojekt;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class PizzaProjektApplication {
+
+    public static void main(String[] args) {
+        SpringApplication.run(PizzaProjektApplication.class, args);
+    }
+
+}
Index: src/main/java/com/example/pizzaprojekt/Repository/PizzaRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Repository/PizzaRepository.java b/src/main/java/com/example/pizzaprojekt/Repository/PizzaRepository.java
new file mode 100644
--- /dev/null	(date 1700891802003)
+++ b/src/main/java/com/example/pizzaprojekt/Repository/PizzaRepository.java	(date 1700891802003)
@@ -0,0 +1,10 @@
+package com.example.pizzaprojekt.Repository;
+
+import com.example.pizzaprojekt.Entity.Pizza;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface PizzaRepository extends JpaRepository<Pizza, Long> {
+
+}
Index: src/main/java/com/example/pizzaprojekt/Repository/CaffeRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Repository/CaffeRepository.java b/src/main/java/com/example/pizzaprojekt/Repository/CaffeRepository.java
new file mode 100644
--- /dev/null	(date 1700891802026)
+++ b/src/main/java/com/example/pizzaprojekt/Repository/CaffeRepository.java	(date 1700891802026)
@@ -0,0 +1,9 @@
+package com.example.pizzaprojekt.Repository;
+
+import com.example.pizzaprojekt.Entity.Caffe;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface CaffeRepository extends JpaRepository<Caffe, Long> {
+}
Index: src/main/java/com/example/pizzaprojekt/Controller/CaffeOneController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Controller/CaffeOneController.java b/src/main/java/com/example/pizzaprojekt/Controller/CaffeOneController.java
new file mode 100644
--- /dev/null	(date 1700895754068)
+++ b/src/main/java/com/example/pizzaprojekt/Controller/CaffeOneController.java	(date 1700895754068)
@@ -0,0 +1,27 @@
+package com.example.pizzaprojekt.Controller;
+
+
+import com.example.pizzaprojekt.Entity.Caffe;
+import com.example.pizzaprojekt.Service.CaffeService;
+import lombok.AllArgsConstructor;
+import org.springframework.web.bind.annotation.*;
+
+@AllArgsConstructor
+@RequestMapping("/api/caffe")
+@RestController
+public class CaffeOneController {
+private  final CaffeService caffeService;
+
+    @GetMapping("/all")
+        public  java.util.List<Caffe> getAllCaffe1(){return  caffeService.getAllCaffe();}
+    @GetMapping ("/caffe{id}")
+    public Caffe getCaffeById(@PathVariable Long id){return caffeService.getCaffeById(id);}
+    @PostMapping ("/new-caffe")
+    public Caffe createCaffe(@RequestBody Caffe caffe){return caffeService.createCaffe(caffe);}
+    @PutMapping("/update{id}")
+    public Caffe updateCaffe(@PathVariable Long id, @RequestBody Caffe updateCaffe){return caffeService.updateCaffe(id, updateCaffe);}
+    @DeleteMapping("/delete{id}")
+    public void deleteCaffe(@PathVariable Long id){
+        caffeService.deleteCaffe(id);}
+
+}
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1700893097566)
+++ b/src/main/resources/application.properties	(date 1700893097566)
@@ -0,0 +1,7 @@
+spring.datasource.url=jdbc:mysql://localhost:3306/pizza
+spring.datasource.username=root
+spring.datasource.password=root
+spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
+spring.jpa.hibernate.ddl-auto=update
+logging.level.org.springframework.security=DEBUG
+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
Index: src/main/java/com/example/pizzaprojekt/Controller/PizzaController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Controller/PizzaController.java b/src/main/java/com/example/pizzaprojekt/Controller/PizzaController.java
new file mode 100644
--- /dev/null	(date 1700892241998)
+++ b/src/main/java/com/example/pizzaprojekt/Controller/PizzaController.java	(date 1700892241998)
@@ -0,0 +1,39 @@
+package com.example.pizzaprojekt.Controller;
+
+
+import com.example.pizzaprojekt.Entity.Pizza;
+import com.example.pizzaprojekt.Service.PizzaService;
+import lombok.AllArgsConstructor;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@AllArgsConstructor
+@RequestMapping("/api/pizzas")
+public class PizzaController {
+    private final PizzaService pizzaService;
+
+@GetMapping("/pizza")
+public List<Pizza> getAllPizza(){
+        return pizzaService.getAllPizza();
+}
+    @GetMapping("/pizza{id}")
+    public Pizza getPizzaById(@PathVariable Long id){
+        return pizzaService.getPizzaById(id);
+    }
+    @PostMapping ("/new-pizza")
+    public Pizza createPizza(@RequestBody Pizza pizza){
+
+        return pizzaService.createPizza(pizza);
+    }
+    @PutMapping("/update{id}")
+    public Pizza updatePizza(@PathVariable Long id, @RequestBody Pizza updatePizza){return pizzaService.updatePizza(id, updatePizza);}
+    @DeleteMapping("/delete{id}")
+    public void deletePizza(@PathVariable Long id){pizzaService.deletePizza(id);
+
+
+    }
+
+
+}
Index: src/main/java/com/example/pizzaprojekt/Service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Service/UserService.java b/src/main/java/com/example/pizzaprojekt/Service/UserService.java
new file mode 100644
--- /dev/null	(date 1700892057844)
+++ b/src/main/java/com/example/pizzaprojekt/Service/UserService.java	(date 1700892057844)
@@ -0,0 +1,55 @@
+package com.example.pizzaprojekt.Service;
+
+
+import com.example.pizzaprojekt.Entity.User;
+import com.example.pizzaprojekt.Repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+
+@Service
+public class UserService {
+    private final UserRepository userRepository;
+
+
+    @Autowired
+    public UserService(UserRepository userRepository) {
+        this.userRepository = userRepository;
+
+    }
+    public User createUser(User user) {
+
+        // Хеширование пароля перед сохранением
+        User user2 = new User();
+        user2.setFirstName("New User");
+
+        return userRepository.save(user);
+    }
+
+    @Autowired
+    public List<User> getAllUsers(){
+        return userRepository.findAll();
+    }
+    public User getUserById(Long id){
+    return userRepository.findById(id).orElse(null);
+    }
+
+    public User updateUser(Long id, User updatedUser){
+    User user1 = userRepository.findById(id).orElse(null);
+        if (user1 != null){
+            user1.setFirstName(updatedUser.getFirstName());
+            user1.setLastName(updatedUser.getLastName());
+            user1.setRoll(updatedUser.getRoll());
+            user1.setStation(updatedUser.getStation());
+            return userRepository.save(user1);
+        }
+        return null;
+        }
+
+    public void deleteUser(Long id){
+        userRepository.deleteById(id);
+
+    }
+}
Index: src/main/java/com/example/pizzaprojekt/Service/CaffeService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Service/CaffeService.java b/src/main/java/com/example/pizzaprojekt/Service/CaffeService.java
new file mode 100644
--- /dev/null	(date 1700892057866)
+++ b/src/main/java/com/example/pizzaprojekt/Service/CaffeService.java	(date 1700892057866)
@@ -0,0 +1,45 @@
+package com.example.pizzaprojekt.Service;
+
+import com.example.pizzaprojekt.Entity.Caffe;
+import com.example.pizzaprojekt.Repository.CaffeRepository;
+import lombok.AllArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.sql.Time;
+import java.util.List;
+
+
+
+@Service
+@AllArgsConstructor
+
+public class CaffeService {
+
+    private final CaffeRepository caffeRepository;
+    public List<Caffe> getAllCaffe(){
+        return caffeRepository.findAll();
+    }
+    public Caffe getCaffeById(Long CaffeId){
+        return caffeRepository.findById(CaffeId).orElse(null);
+    }
+    public Caffe createCaffe(Caffe caffe){
+        return caffeRepository.save(caffe);
+    }
+    public Caffe updateCaffe(Long caffeId, Caffe updateCaffe) {
+        Caffe caffe = caffeRepository.findById(caffeId).orElse(null);
+        if (caffe != null) {
+            caffe.setNameCaffe(updateCaffe.getNameCaffe());
+            caffe.setCity(updateCaffe.getCity());
+            caffe.setAddress(updateCaffe.getAddress());
+            caffe.setEmail(updateCaffe.getEmail());
+            caffe.setPhone(updateCaffe.getPhone());
+            caffe.setOpenAt(Time.valueOf(toString()));
+            caffe.setClosed_at(Time.valueOf(toString()));
+            return caffeRepository.save(caffe);
+        }
+    return null;
+    }
+    public void deleteCaffe(Long caffeID){
+        caffeRepository.deleteById(caffeID);
+    }
+}
Index: src/test/java/com/example/pizzaprojekt/PizzaProjektApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/example/pizzaprojekt/PizzaProjektApplicationTests.java b/src/test/java/com/example/pizzaprojekt/PizzaProjektApplicationTests.java
new file mode 100644
--- /dev/null	(date 1700890910475)
+++ b/src/test/java/com/example/pizzaprojekt/PizzaProjektApplicationTests.java	(date 1700890910475)
@@ -0,0 +1,13 @@
+package com.example.pizzaprojekt;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class PizzaProjektApplicationTests {
+
+    @Test
+    void contextLoads() {
+    }
+
+}
Index: src/main/java/com/example/pizzaprojekt/Controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Controller/UserController.java b/src/main/java/com/example/pizzaprojekt/Controller/UserController.java
new file mode 100644
--- /dev/null	(date 1700896955906)
+++ b/src/main/java/com/example/pizzaprojekt/Controller/UserController.java	(date 1700896955906)
@@ -0,0 +1,36 @@
+package com.example.pizzaprojekt.Controller;
+
+import com.example.pizzaprojekt.Entity.User;
+import com.example.pizzaprojekt.Service.UserService;
+import lombok.AllArgsConstructor;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+@AllArgsConstructor
+@RestController
+@RequestMapping("/api/user")
+public class UserController {
+    private final UserService userService;
+
+@GetMapping("/alluser")
+public List<User> hello(){return userService.getAllUsers();}
+        @GetMapping(
+                "/get-user{id}")
+    public List<User> getUserById(@PathVariable Long id){
+        return userService.getAllUsers();
+        }
+        @PostMapping("create-user")
+    public User createUser(@RequestBody User user){
+         return userService.createUser(user);
+        }
+        @PutMapping("update{id}")
+    public User updateUser (@PathVariable Long id, @RequestBody User updatedUser){
+      return userService.updateUser(id, updatedUser);
+        }
+        @DeleteMapping("/delete{id}")
+    public void deleteUser(@PathVariable Long id){
+        userService.deleteUser(id);
+        }
+
+    }
+
Index: .mvn/wrapper/maven-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
--- /dev/null	(date 1700890888399)
+++ b/.mvn/wrapper/maven-wrapper.properties	(date 1700890888399)
@@ -0,0 +1,2 @@
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.5/apache-maven-3.9.5-bin.zip
+wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(date 1700893761280)
+++ b/pom.xml	(date 1700893761280)
@@ -0,0 +1,107 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>3.2.0</version>
+        <relativePath/> <!-- lookup parent from repository -->
+    </parent>
+    <groupId>com.example</groupId>
+    <artifactId>PizzaProjekt</artifactId>
+    <version>0.0.1-SNAPSHOT</version>
+    <name>PizzaProjekt</name>
+    <description>PizzaProjekt</description>
+    <properties>
+        <java.version>17</java.version>
+    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-jpa</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-thymeleaf</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-web</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.thymeleaf.extras</groupId>
+            <artifactId>thymeleaf-extras-springsecurity6</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>com.mysql</groupId>
+            <artifactId>mysql-connector-j</artifactId>
+            <scope>runtime</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <optional>true</optional>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.restdocs</groupId>
+            <artifactId>spring-restdocs-mockmvc</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.security</groupId>
+            <artifactId>spring-security-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.asciidoctor</groupId>
+                <artifactId>asciidoctor-maven-plugin</artifactId>
+                <version>2.2.1</version>
+                <executions>
+                    <execution>
+                        <id>generate-docs</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>process-asciidoc</goal>
+                        </goals>
+                        <configuration>
+                            <backend>html</backend>
+                            <doctype>book</doctype>
+                        </configuration>
+                    </execution>
+                </executions>
+                <dependencies>
+                    <dependency>
+                        <groupId>org.springframework.restdocs</groupId>
+                        <artifactId>spring-restdocs-asciidoctor</artifactId>
+                        <version>${spring-restdocs.version}</version>
+                    </dependency>
+                </dependencies>
+            </plugin>
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+                <configuration>
+                    <excludes>
+                        <exclude>
+                            <groupId>org.projectlombok</groupId>
+                            <artifactId>lombok</artifactId>
+                        </exclude>
+                    </excludes>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+
+</project>
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1700890888391)
+++ b/.gitignore	(date 1700890888391)
@@ -0,0 +1,33 @@
+HELP.md
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
Index: mvnw
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mvnw b/mvnw
new file mode 100644
--- /dev/null	(date 1700890888397)
+++ b/mvnw	(date 1700890888397)
@@ -0,0 +1,308 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Apache Maven Wrapper startup batch script, version 3.2.0
+#
+# Required ENV vars:
+# ------------------
+#   JAVA_HOME - location of a JDK home dir
+#
+# Optional ENV vars
+# -----------------
+#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
+#     e.g. to debug Maven itself, use
+#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+# ----------------------------------------------------------------------------
+
+if [ -z "$MAVEN_SKIP_RC" ] ; then
+
+  if [ -f /usr/local/etc/mavenrc ] ; then
+    . /usr/local/etc/mavenrc
+  fi
+
+  if [ -f /etc/mavenrc ] ; then
+    . /etc/mavenrc
+  fi
+
+  if [ -f "$HOME/.mavenrc" ] ; then
+    . "$HOME/.mavenrc"
+  fi
+
+fi
+
+# OS specific support.  $var _must_ be set to either true or false.
+cygwin=false;
+darwin=false;
+mingw=false
+case "$(uname)" in
+  CYGWIN*) cygwin=true ;;
+  MINGW*) mingw=true;;
+  Darwin*) darwin=true
+    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
+    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
+    if [ -z "$JAVA_HOME" ]; then
+      if [ -x "/usr/libexec/java_home" ]; then
+        JAVA_HOME="$(/usr/libexec/java_home)"; export JAVA_HOME
+      else
+        JAVA_HOME="/Library/Java/Home"; export JAVA_HOME
+      fi
+    fi
+    ;;
+esac
+
+if [ -z "$JAVA_HOME" ] ; then
+  if [ -r /etc/gentoo-release ] ; then
+    JAVA_HOME=$(java-config --jre-home)
+  fi
+fi
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched
+if $cygwin ; then
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=$(cygpath --unix "$JAVA_HOME")
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=$(cygpath --path --unix "$CLASSPATH")
+fi
+
+# For Mingw, ensure paths are in UNIX format before anything is touched
+if $mingw ; then
+  [ -n "$JAVA_HOME" ] && [ -d "$JAVA_HOME" ] &&
+    JAVA_HOME="$(cd "$JAVA_HOME" || (echo "cannot cd into $JAVA_HOME."; exit 1); pwd)"
+fi
+
+if [ -z "$JAVA_HOME" ]; then
+  javaExecutable="$(which javac)"
+  if [ -n "$javaExecutable" ] && ! [ "$(expr "\"$javaExecutable\"" : '\([^ ]*\)')" = "no" ]; then
+    # readlink(1) is not available as standard on Solaris 10.
+    readLink=$(which readlink)
+    if [ ! "$(expr "$readLink" : '\([^ ]*\)')" = "no" ]; then
+      if $darwin ; then
+        javaHome="$(dirname "\"$javaExecutable\"")"
+        javaExecutable="$(cd "\"$javaHome\"" && pwd -P)/javac"
+      else
+        javaExecutable="$(readlink -f "\"$javaExecutable\"")"
+      fi
+      javaHome="$(dirname "\"$javaExecutable\"")"
+      javaHome=$(expr "$javaHome" : '\(.*\)/bin')
+      JAVA_HOME="$javaHome"
+      export JAVA_HOME
+    fi
+  fi
+fi
+
+if [ -z "$JAVACMD" ] ; then
+  if [ -n "$JAVA_HOME"  ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+    fi
+  else
+    JAVACMD="$(\unset -f command 2>/dev/null; \command -v java)"
+  fi
+fi
+
+if [ ! -x "$JAVACMD" ] ; then
+  echo "Error: JAVA_HOME is not defined correctly." >&2
+  echo "  We cannot execute $JAVACMD" >&2
+  exit 1
+fi
+
+if [ -z "$JAVA_HOME" ] ; then
+  echo "Warning: JAVA_HOME environment variable is not set."
+fi
+
+# traverses directory structure from process work directory to filesystem root
+# first directory with .mvn subdirectory is considered project base directory
+find_maven_basedir() {
+  if [ -z "$1" ]
+  then
+    echo "Path not specified to find_maven_basedir"
+    return 1
+  fi
+
+  basedir="$1"
+  wdir="$1"
+  while [ "$wdir" != '/' ] ; do
+    if [ -d "$wdir"/.mvn ] ; then
+      basedir=$wdir
+      break
+    fi
+    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
+    if [ -d "${wdir}" ]; then
+      wdir=$(cd "$wdir/.." || exit 1; pwd)
+    fi
+    # end of workaround
+  done
+  printf '%s' "$(cd "$basedir" || exit 1; pwd)"
+}
+
+# concatenates all lines of a file
+concat_lines() {
+  if [ -f "$1" ]; then
+    # Remove \r in case we run on Windows within Git Bash
+    # and check out the repository with auto CRLF management
+    # enabled. Otherwise, we may read lines that are delimited with
+    # \r\n and produce $'-Xarg\r' rather than -Xarg due to word
+    # splitting rules.
+    tr -s '\r\n' ' ' < "$1"
+  fi
+}
+
+log() {
+  if [ "$MVNW_VERBOSE" = true ]; then
+    printf '%s\n' "$1"
+  fi
+}
+
+BASE_DIR=$(find_maven_basedir "$(dirname "$0")")
+if [ -z "$BASE_DIR" ]; then
+  exit 1;
+fi
+
+MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}; export MAVEN_PROJECTBASEDIR
+log "$MAVEN_PROJECTBASEDIR"
+
+##########################################################################################
+# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+# This allows using the maven wrapper in projects that prohibit checking in binary data.
+##########################################################################################
+wrapperJarPath="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar"
+if [ -r "$wrapperJarPath" ]; then
+    log "Found $wrapperJarPath"
+else
+    log "Couldn't find $wrapperJarPath, downloading it ..."
+
+    if [ -n "$MVNW_REPOURL" ]; then
+      wrapperUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    else
+      wrapperUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    fi
+    while IFS="=" read -r key value; do
+      # Remove '\r' from value to allow usage on windows as IFS does not consider '\r' as a separator ( considers space, tab, new line ('\n'), and custom '=' )
+      safeValue=$(echo "$value" | tr -d '\r')
+      case "$key" in (wrapperUrl) wrapperUrl="$safeValue"; break ;;
+      esac
+    done < "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
+    log "Downloading from: $wrapperUrl"
+
+    if $cygwin; then
+      wrapperJarPath=$(cygpath --path --windows "$wrapperJarPath")
+    fi
+
+    if command -v wget > /dev/null; then
+        log "Found wget ... using wget"
+        [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--quiet"
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            wget $QUIET "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        else
+            wget $QUIET --http-user="$MVNW_USERNAME" --http-password="$MVNW_PASSWORD" "$wrapperUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
+        fi
+    elif command -v curl > /dev/null; then
+        log "Found curl ... using curl"
+        [ "$MVNW_VERBOSE" = true ] && QUIET="" || QUIET="--silent"
+        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
+            curl $QUIET -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
+        else
+            curl $QUIET --user "$MVNW_USERNAME:$MVNW_PASSWORD" -o "$wrapperJarPath" "$wrapperUrl" -f -L || rm -f "$wrapperJarPath"
+        fi
+    else
+        log "Falling back to using Java to download"
+        javaSource="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java"
+        javaClass="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class"
+        # For Cygwin, switch paths to Windows format before running javac
+        if $cygwin; then
+          javaSource=$(cygpath --path --windows "$javaSource")
+          javaClass=$(cygpath --path --windows "$javaClass")
+        fi
+        if [ -e "$javaSource" ]; then
+            if [ ! -e "$javaClass" ]; then
+                log " - Compiling MavenWrapperDownloader.java ..."
+                ("$JAVA_HOME/bin/javac" "$javaSource")
+            fi
+            if [ -e "$javaClass" ]; then
+                log " - Running MavenWrapperDownloader.java ..."
+                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$wrapperUrl" "$wrapperJarPath") || rm -f "$wrapperJarPath"
+            fi
+        fi
+    fi
+fi
+##########################################################################################
+# End of extension
+##########################################################################################
+
+# If specified, validate the SHA-256 sum of the Maven wrapper jar file
+wrapperSha256Sum=""
+while IFS="=" read -r key value; do
+  case "$key" in (wrapperSha256Sum) wrapperSha256Sum=$value; break ;;
+  esac
+done < "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties"
+if [ -n "$wrapperSha256Sum" ]; then
+  wrapperSha256Result=false
+  if command -v sha256sum > /dev/null; then
+    if echo "$wrapperSha256Sum  $wrapperJarPath" | sha256sum -c > /dev/null 2>&1; then
+      wrapperSha256Result=true
+    fi
+  elif command -v shasum > /dev/null; then
+    if echo "$wrapperSha256Sum  $wrapperJarPath" | shasum -a 256 -c > /dev/null 2>&1; then
+      wrapperSha256Result=true
+    fi
+  else
+    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available."
+    echo "Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties."
+    exit 1
+  fi
+  if [ $wrapperSha256Result = false ]; then
+    echo "Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised." >&2
+    echo "Investigate or delete $wrapperJarPath to attempt a clean download." >&2
+    echo "If you updated your Maven version, you need to update the specified wrapperSha256Sum property." >&2
+    exit 1
+  fi
+fi
+
+MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin; then
+  [ -n "$JAVA_HOME" ] &&
+    JAVA_HOME=$(cygpath --path --windows "$JAVA_HOME")
+  [ -n "$CLASSPATH" ] &&
+    CLASSPATH=$(cygpath --path --windows "$CLASSPATH")
+  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
+    MAVEN_PROJECTBASEDIR=$(cygpath --path --windows "$MAVEN_PROJECTBASEDIR")
+fi
+
+# Provide a "standardized" way to retrieve the CLI args that will
+# work with both Windows and non-Windows executions.
+MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $*"
+export MAVEN_CMD_LINE_ARGS
+
+WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+# shellcheck disable=SC2086 # safe args
+exec "$JAVACMD" \
+  $MAVEN_OPTS \
+  $MAVEN_DEBUG_OPTS \
+  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
+  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
+  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
Index: src/main/java/com/example/pizzaprojekt/Entity/Caffe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Entity/Caffe.java b/src/main/java/com/example/pizzaprojekt/Entity/Caffe.java
new file mode 100644
--- /dev/null	(date 1700891373570)
+++ b/src/main/java/com/example/pizzaprojekt/Entity/Caffe.java	(date 1700891373570)
@@ -0,0 +1,36 @@
+package com.example.pizzaprojekt.Entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.sql.Time;
+
+@Entity
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "caffe")
+public class Caffe {
+    @Id
+    @GeneratedValue (strategy = GenerationType.AUTO)
+   private Long caffeId;
+    @Column (name = "name_caffe")
+    private String nameCaffe;
+    @Column(name = "city")
+    private String city;
+    @Column(name = "address")
+    private String address;
+    @Column(name = "email")
+    private String email;
+    @Column(name = "phone")
+    private Long phone;
+    @Column(name = "open_at")
+    private Time openAt;
+    @Column(name = "closed_at")
+    private Time closed_at;
+
+ public Caffe(long l, String s) {
+ }
+}
Index: mvnw.cmd
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mvnw.cmd b/mvnw.cmd
new file mode 100644
--- /dev/null	(date 1700890888398)
+++ b/mvnw.cmd	(date 1700890888398)
@@ -0,0 +1,205 @@
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    https://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Apache Maven Wrapper startup batch script, version 3.2.0
+@REM
+@REM Required ENV vars:
+@REM JAVA_HOME - location of a JDK home dir
+@REM
+@REM Optional ENV vars
+@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
+@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
+@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
+@REM     e.g. to debug Maven itself, use
+@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
+@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
+@REM ----------------------------------------------------------------------------
+
+@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
+@echo off
+@REM set title of command window
+title %0
+@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
+@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
+
+@REM set %HOME% to equivalent of $HOME
+if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
+
+@REM Execute a user defined script before this one
+if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
+@REM check for pre script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
+if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
+:skipRcPre
+
+@setlocal
+
+set ERROR_CODE=0
+
+@REM To isolate internal variables from possible post scripts, we use another setlocal
+@setlocal
+
+@REM ==== START VALIDATION ====
+if not "%JAVA_HOME%" == "" goto OkJHome
+
+echo.
+echo Error: JAVA_HOME not found in your environment. >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+:OkJHome
+if exist "%JAVA_HOME%\bin\java.exe" goto init
+
+echo.
+echo Error: JAVA_HOME is set to an invalid directory. >&2
+echo JAVA_HOME = "%JAVA_HOME%" >&2
+echo Please set the JAVA_HOME variable in your environment to match the >&2
+echo location of your Java installation. >&2
+echo.
+goto error
+
+@REM ==== END VALIDATION ====
+
+:init
+
+@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
+@REM Fallback to current working directory if not found.
+
+set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
+IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
+
+set EXEC_DIR=%CD%
+set WDIR=%EXEC_DIR%
+:findBaseDir
+IF EXIST "%WDIR%"\.mvn goto baseDirFound
+cd ..
+IF "%WDIR%"=="%CD%" goto baseDirNotFound
+set WDIR=%CD%
+goto findBaseDir
+
+:baseDirFound
+set MAVEN_PROJECTBASEDIR=%WDIR%
+cd "%EXEC_DIR%"
+goto endDetectBaseDir
+
+:baseDirNotFound
+set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
+cd "%EXEC_DIR%"
+
+:endDetectBaseDir
+
+IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
+
+@setlocal EnableExtensions EnableDelayedExpansion
+for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
+@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
+
+:endReadAdditionalConfig
+
+SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
+set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
+set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
+
+set WRAPPER_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperUrl" SET WRAPPER_URL=%%B
+)
+
+@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
+@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
+if exist %WRAPPER_JAR% (
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Found %WRAPPER_JAR%
+    )
+) else (
+    if not "%MVNW_REPOURL%" == "" (
+        SET WRAPPER_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
+    )
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Couldn't find %WRAPPER_JAR%, downloading it ...
+        echo Downloading from: %WRAPPER_URL%
+    )
+
+    powershell -Command "&{"^
+		"$webclient = new-object System.Net.WebClient;"^
+		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
+		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
+		"}"^
+		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')"^
+		"}"
+    if "%MVNW_VERBOSE%" == "true" (
+        echo Finished downloading %WRAPPER_JAR%
+    )
+)
+@REM End of extension
+
+@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file
+SET WRAPPER_SHA_256_SUM=""
+FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
+    IF "%%A"=="wrapperSha256Sum" SET WRAPPER_SHA_256_SUM=%%B
+)
+IF NOT %WRAPPER_SHA_256_SUM%=="" (
+    powershell -Command "&{"^
+       "$hash = (Get-FileHash \"%WRAPPER_JAR%\" -Algorithm SHA256).Hash.ToLower();"^
+       "If('%WRAPPER_SHA_256_SUM%' -ne $hash){"^
+       "  Write-Output 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';"^
+       "  Write-Output 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';"^
+       "  Write-Output 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';"^
+       "  exit 1;"^
+       "}"^
+       "}"
+    if ERRORLEVEL 1 goto error
+)
+
+@REM Provide a "standardized" way to retrieve the CLI args that will
+@REM work with both Windows and non-Windows executions.
+set MAVEN_CMD_LINE_ARGS=%*
+
+%MAVEN_JAVA_EXE% ^
+  %JVM_CONFIG_MAVEN_PROPS% ^
+  %MAVEN_OPTS% ^
+  %MAVEN_DEBUG_OPTS% ^
+  -classpath %WRAPPER_JAR% ^
+  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
+  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
+if ERRORLEVEL 1 goto error
+goto end
+
+:error
+set ERROR_CODE=1
+
+:end
+@endlocal & set ERROR_CODE=%ERROR_CODE%
+
+if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
+@REM check for post script, once with legacy .bat ending and once with .cmd ending
+if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
+if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
+:skipRcPost
+
+@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
+if "%MAVEN_BATCH_PAUSE%"=="on" pause
+
+if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%
+
+cmd /C exit /B %ERROR_CODE%
Index: src/main/java/com/example/pizzaprojekt/Entity/RegisterUsers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Entity/RegisterUsers.java b/src/main/java/com/example/pizzaprojekt/Entity/RegisterUsers.java
new file mode 100644
--- /dev/null	(date 1700891411022)
+++ b/src/main/java/com/example/pizzaprojekt/Entity/RegisterUsers.java	(date 1700891411022)
@@ -0,0 +1,21 @@
+package com.example.pizzaprojekt.Entity;
+
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
+import lombok.Data;
+
+@Entity
+@Data
+@Table
+public class RegisterUsers {
+    @Id
+    public Long id;
+@Column(name = "Username")
+    public String Username;
+@Column(name = "Password")
+    public String Password;
+        @Column(name = "Roles")
+    public String Roles;
+}
Index: src/main/java/com/example/pizzaprojekt/Entity/Pizza.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Entity/Pizza.java b/src/main/java/com/example/pizzaprojekt/Entity/Pizza.java
new file mode 100644
--- /dev/null	(date 1700891411016)
+++ b/src/main/java/com/example/pizzaprojekt/Entity/Pizza.java	(date 1700891411016)
@@ -0,0 +1,50 @@
+package com.example.pizzaprojekt.Entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import org.springframework.data.annotation.Id;
+
+@AllArgsConstructor
+@Entity
+@Data
+@Table(name = "pizza")
+public class Pizza {
+
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    private Long PizzaId;
+
+    @Column(name = "name_pizza")
+    private String NamePizza;
+
+    @Column(name = "ingredients")
+    private String Ingredients;
+
+    @Column(name = "size")
+    private int size;
+
+    @Column(name = "price")
+
+    private int price;
+    @Column(name = "quantity")
+    private String quantity;
+    @jakarta.persistence.Id
+    private Long id;
+
+    public Pizza(){}
+
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Long getId() {
+        return id;
+    }
+}
+
+
+
+
Index: src/main/java/com/example/pizzaprojekt/Entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Entity/User.java b/src/main/java/com/example/pizzaprojekt/Entity/User.java
new file mode 100644
--- /dev/null	(date 1700891411034)
+++ b/src/main/java/com/example/pizzaprojekt/Entity/User.java	(date 1700891411034)
@@ -0,0 +1,36 @@
+package com.example.pizzaprojekt.Entity;
+
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.data.annotation.Id;
+
+@AllArgsConstructor
+@NoArgsConstructor
+@Data
+@Entity
+@Table(name = "User")
+public class User {
+
+
+    @jakarta.persistence.Id
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    public Long UserId;
+
+    @Column(name = "first_name")
+    public String firstName;
+
+    @Column(name = "last_name")
+    public String lastName;
+
+    @Column(name = "roll")
+    public String roll;
+    @Column(name = "station")
+    public String station;
+
+    @Column(name = "password")
+    public String password;
+
+}
Index: src/main/java/com/example/pizzaprojekt/Entity/UserRolls.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/pizzaprojekt/Entity/UserRolls.java b/src/main/java/com/example/pizzaprojekt/Entity/UserRolls.java
new file mode 100644
--- /dev/null	(date 1700891411028)
+++ b/src/main/java/com/example/pizzaprojekt/Entity/UserRolls.java	(date 1700891411028)
@@ -0,0 +1,9 @@
+package com.example.pizzaprojekt.Entity;
+
+public enum UserRolls {
+            ADMIN,
+    USER,
+    COOK,
+    CUSTOMER,
+    SELLE,
+}
